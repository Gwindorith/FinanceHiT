"use strict";exports.id=438,exports.ids=[438],exports.modules={5438:(e,i,n)=>{n.a(e,async(e,t)=>{try{n.d(i,{AW:()=>getAllUsers,Bg:()=>createCateringOption,GA:()=>getUserById,H3:()=>getParticipantsByInvoice,HY:()=>createTrainingInvoice,Hu:()=>getParticipantById,Hz:()=>updateTrainingRoomRentOption,Jd:()=>deleteTrainingInvoice,KU:()=>createTrainingRoomRentOption,Nq:()=>updateUser,Nu:()=>getTrainingInvoiceById,Ru:()=>getAllTrainingRoomRentOptions,VQ:()=>deleteCateringOption,Xl:()=>deleteTrainingRoomRentOption,dO:()=>updateCateringOption,dQ:()=>getUserByUsername,fA:()=>updateTrainingInvoice,getAllCateringOptions:()=>getAllCateringOptions,h8:()=>deleteUser,iR:()=>addParticipant,j9:()=>getAllTrainingInvoices,p8:()=>calculateTotalAmount,pX:()=>getTrainingRoomRentOptionById,r4:()=>createUser,t4:()=>getCateringOptionById,vc:()=>deleteParticipant,vq:()=>initializeDefaultAdmin,yl:()=>updateParticipant});var a=n(8678),r=e([a]);a=(r.then?(await r)():r)[0];let c=new a.Pool({connectionString:process.env.DATABASE_URL,ssl:!process.env.DATABASE_URL?.includes("localhost")&&{rejectUnauthorized:!1}});async function getAllTrainingInvoices(){let e=await c.query("SELECT * FROM training_invoices ORDER BY created_at DESC");return e.rows.map(deserializeInvoice)}async function getTrainingInvoiceById(e){let i=await c.query("SELECT * FROM training_invoices WHERE id = $1",[e]);return i.rows[0]?deserializeInvoice(i.rows[0]):void 0}async function createTrainingInvoice(e){let i=await c.query(`INSERT INTO training_invoices 
      (invoice_number, invoice_date, customer, training_name, training_dates, duration_days, trainer_costs, office_costs, margin_percentage, total_invoice_amount, trainer_availability_emailed, masterclass_planning_added, lms_updated, navara_event_agenda_updated, catering_ordered, trainer_invoice_received)
      VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
      RETURNING *`,[e.invoice_number??"",e.invoice_date??"",e.customer,e.training_name,JSON.stringify(e.training_dates),e.duration_days,e.trainer_costs,e.office_costs,e.margin_percentage,e.total_invoice_amount,e.trainer_availability_emailed??!1,e.masterclass_planning_added??!1,e.lms_updated??!1,e.navara_event_agenda_updated??!1,e.catering_ordered??!1,e.trainer_invoice_received??!1]);return deserializeInvoice(i.rows[0])}async function updateTrainingInvoice(e,i){let n=await getTrainingInvoiceById(e);if(!n)return;let t={...n,...i},a=await c.query(`UPDATE training_invoices SET
      invoice_number = $1,
      invoice_date = $2,
      customer = $3,
      training_name = $4,
      training_dates = $5,
      duration_days = $6,
      trainer_costs = $7,
      office_costs = $8,
      margin_percentage = $9,
      total_invoice_amount = $10,
      trainer_availability_emailed = $11,
      masterclass_planning_added = $12,
      lms_updated = $13,
      navara_event_agenda_updated = $14,
      catering_ordered = $15,
      trainer_invoice_received = $16,
      updated_at = NOW()
    WHERE id = $17 RETURNING *`,[t.invoice_number??"",t.invoice_date??"",t.customer,t.training_name,JSON.stringify(t.training_dates),t.duration_days,t.trainer_costs,t.office_costs,t.margin_percentage,t.total_invoice_amount,t.trainer_availability_emailed??!1,t.masterclass_planning_added??!1,t.lms_updated??!1,t.navara_event_agenda_updated??!1,t.catering_ordered??!1,t.trainer_invoice_received??!1,e]);return deserializeInvoice(a.rows[0])}async function deleteTrainingInvoice(e){let i=await c.query("DELETE FROM training_invoices WHERE id = $1",[e]);return(i.rowCount??0)>0}async function getParticipantsByInvoice(e){let i=await c.query("SELECT * FROM participants WHERE training_invoice_id = $1 ORDER BY id ASC",[e]);return i.rows}async function addParticipant(e){let i=await c.query("INSERT INTO participants (training_invoice_id, name, email, company) VALUES ($1, $2, $3, $4) RETURNING *",[e.training_invoice_id,e.name,e.email,e.company]);return i.rows[0]}async function updateParticipant(e,i){let n=await getParticipantById(e);if(!n)return;let t={...n,...i},a=await c.query("UPDATE participants SET name = $1, email = $2, company = $3 WHERE id = $4 RETURNING *",[t.name,t.email,t.company,e]);return a.rows[0]}async function getParticipantById(e){let i=await c.query("SELECT * FROM participants WHERE id = $1",[e]);return i.rows[0]}async function deleteParticipant(e){let i=await c.query("DELETE FROM participants WHERE id = $1",[e]);return(i.rowCount??0)>0}function calculateTotalAmount(e,i,n){return e+i+e*(n/100)}function deserializeInvoice(e){return{...e,training_dates:"string"==typeof e.training_dates?JSON.parse(e.training_dates):e.training_dates,trainer_costs:Number(e.trainer_costs),office_costs:Number(e.office_costs),margin_percentage:Number(e.margin_percentage),total_invoice_amount:Number(e.total_invoice_amount),trainer_availability_emailed:!!e.trainer_availability_emailed,masterclass_planning_added:!!e.masterclass_planning_added,lms_updated:!!e.lms_updated,navara_event_agenda_updated:!!e.navara_event_agenda_updated,catering_ordered:!!e.catering_ordered,trainer_invoice_received:!!e.trainer_invoice_received}}async function getAllUsers(){let e=await c.query("SELECT id, username, email, role, name, created_at, updated_at FROM users ORDER BY created_at DESC");return e.rows}async function getUserById(e){let i=await c.query("SELECT id, username, email, role, name, created_at, updated_at FROM users WHERE id = $1",[e]);return i.rows[0]}async function getUserByUsername(e){let i=await c.query("SELECT * FROM users WHERE username = $1",[e]);return i.rows[0]}async function createUser(e){let i=await c.query("INSERT INTO users (username, email, password, role, name) VALUES ($1, $2, $3, $4, $5) RETURNING id, username, email, role, name, created_at, updated_at",[e.username,e.email,e.password,e.role,e.name]);return i.rows[0]}async function updateUser(e,i){let n=await getUserById(e);if(!n)return;let t=[],a=[],r=1;if(void 0!==i.username&&(t.push(`username = $${r++}`),a.push(i.username)),void 0!==i.email&&(t.push(`email = $${r++}`),a.push(i.email)),void 0!==i.role&&(t.push(`role = $${r++}`),a.push(i.role)),void 0!==i.name&&(t.push(`name = $${r++}`),a.push(i.name)),0===t.length)return n;t.push("updated_at = NOW()"),a.push(e);let o=await c.query(`UPDATE users SET ${t.join(", ")} WHERE id = $${r} RETURNING id, username, email, role, name, created_at, updated_at`,a);return o.rows[0]}async function deleteUser(e){let i=await c.query("DELETE FROM users WHERE id = $1",[e]);return(i.rowCount??0)>0}async function initializeDefaultAdmin(){let e=await getUserByUsername("admin");if(e)return;let i=n(8802),t=await i.hash("admin",10);await createUser({username:"admin",email:"admin@example.com",password:t,role:"admin",name:"Administrator"})}async function getAllCateringOptions(){let e=await c.query("SELECT * FROM catering_options ORDER BY name ASC");return e.rows.map(e=>({...e,lunch_price_per_participant:Number(e.lunch_price_per_participant),dinner_price_per_participant:Number(e.dinner_price_per_participant),is_active:!!e.is_active}))}async function getCateringOptionById(e){let i=await c.query("SELECT * FROM catering_options WHERE id = $1",[e]);if(!i.rows[0])return;let n=i.rows[0];return{...n,lunch_price_per_participant:Number(n.lunch_price_per_participant),dinner_price_per_participant:Number(n.dinner_price_per_participant),is_active:!!n.is_active}}async function createCateringOption(e){let i=await c.query("INSERT INTO catering_options (name, description, lunch_price_per_participant, dinner_price_per_participant, is_active) VALUES ($1, $2, $3, $4, $5) RETURNING *",[e.name,e.description||"",e.lunch_price_per_participant,e.dinner_price_per_participant,e.is_active??!0]),n=i.rows[0];return{...n,lunch_price_per_participant:Number(n.lunch_price_per_participant),dinner_price_per_participant:Number(n.dinner_price_per_participant),is_active:!!n.is_active}}async function updateCateringOption(e,i){let n=await getCateringOptionById(e);if(!n)return;let t=[],a=[],r=1;if(void 0!==i.name&&(t.push(`name = $${r++}`),a.push(i.name)),void 0!==i.description&&(t.push(`description = $${r++}`),a.push(i.description)),void 0!==i.lunch_price_per_participant&&(t.push(`lunch_price_per_participant = $${r++}`),a.push(i.lunch_price_per_participant)),void 0!==i.dinner_price_per_participant&&(t.push(`dinner_price_per_participant = $${r++}`),a.push(i.dinner_price_per_participant)),void 0!==i.is_active&&(t.push(`is_active = $${r++}`),a.push(i.is_active)),0===t.length)return n;t.push("updated_at = NOW()"),a.push(e);let o=await c.query(`UPDATE catering_options SET ${t.join(", ")} WHERE id = $${r} RETURNING *`,a),_=o.rows[0];return{..._,lunch_price_per_participant:Number(_.lunch_price_per_participant),dinner_price_per_participant:Number(_.dinner_price_per_participant),is_active:!!_.is_active}}async function deleteCateringOption(e){let i=await c.query("DELETE FROM catering_options WHERE id = $1",[e]);return(i.rowCount??0)>0}async function getAllTrainingRoomRentOptions(){let e=await c.query("SELECT * FROM training_room_rent_options ORDER BY name ASC");return e.rows.map(e=>({...e,rent_per_hour:Number(e.rent_per_hour),is_active:!!e.is_active}))}async function getTrainingRoomRentOptionById(e){let i=await c.query("SELECT * FROM training_room_rent_options WHERE id = $1",[e]);if(!i.rows[0])return;let n=i.rows[0];return{...n,rent_per_hour:Number(n.rent_per_hour),is_active:!!n.is_active}}async function createTrainingRoomRentOption(e){let i=await c.query("INSERT INTO training_room_rent_options (name, description, rent_per_hour, is_active) VALUES ($1, $2, $3, $4) RETURNING *",[e.name,e.description||"",e.rent_per_hour,e.is_active??!0]),n=i.rows[0];return{...n,rent_per_hour:Number(n.rent_per_hour),is_active:!!n.is_active}}async function updateTrainingRoomRentOption(e,i){let n=await getTrainingRoomRentOptionById(e);if(!n)return;let t=[],a=[],r=1;if(void 0!==i.name&&(t.push(`name = $${r++}`),a.push(i.name)),void 0!==i.description&&(t.push(`description = $${r++}`),a.push(i.description)),void 0!==i.rent_per_hour&&(t.push(`rent_per_hour = $${r++}`),a.push(i.rent_per_hour)),void 0!==i.is_active&&(t.push(`is_active = $${r++}`),a.push(i.is_active)),0===t.length)return n;t.push("updated_at = NOW()"),a.push(e);let o=await c.query(`UPDATE training_room_rent_options SET ${t.join(", ")} WHERE id = $${r} RETURNING *`,a),_=o.rows[0];return{..._,rent_per_hour:Number(_.rent_per_hour),is_active:!!_.is_active}}async function deleteTrainingRoomRentOption(e){let i=await c.query("DELETE FROM training_room_rent_options WHERE id = $1",[e]);return(i.rowCount??0)>0}t()}catch(e){t(e)}})}};